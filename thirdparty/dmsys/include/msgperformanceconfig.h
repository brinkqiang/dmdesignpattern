/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
**                   Auther: brinkqiang                            **
********************************************************************/

/*       Version Number: 1_0          */

#ifndef MSGPERFORMANCECONFIG_H_INCLUDE_VERSION_1_0
#define MSGPERFORMANCECONFIG_H_INCLUDE_VERSION_1_0

#include <map>
#include <vector>
#include <string>
#include <sstream>
#include <fstream>

#include "errordataex.h"
#include "xmldata.h"
#include "msgperformance.h"
using namespace std;

/*Define Structs and Unions        Begin*/

NSMSGPERFORMANCE_BEGIN
class CXMSG{
public:
public:
    CXMSG()
    {
         m_qwMsgID = 0;
         m_strLastTime = "";
         m_qwMaxConsumeTime = 0;
         m_qwAvgConsumeTime = 0;
         m_qwTotalConsumeTime = 0;
         m_qwMsgCount = 0;
         m_qwTotalMsgSize = 0;
    }

public:
    unsigned long long                  &GetMsgID(){ return m_qwMsgID;}                                   /// MsgID

    string                              &GetLastTime(){ return m_strLastTime;}                            /// LastTime

    unsigned long long                  &GetMaxConsumeTime(){ return m_qwMaxConsumeTime;}                 /// MaxConsumeTime

    unsigned long long                  &GetAvgConsumeTime(){ return m_qwAvgConsumeTime;}                 /// AvgConsumeTime

    unsigned long long                  &GetTotalConsumeTime(){ return m_qwTotalConsumeTime;}             /// TotalConsumeTime

    unsigned long long                  &GetMsgCount(){ return m_qwMsgCount;}                             /// MsgCount

    unsigned long long                  &GetTotalMsgSize(){ return m_qwTotalMsgSize;}                     /// TotalMsgSize

public:
    bool Init(IErrorDataEx& oError)
    {
        return true;
    }

public:

private:
    unsigned long long                  m_qwMsgID;
    string                              m_strLastTime;
    unsigned long long                  m_qwMaxConsumeTime;
    unsigned long long                  m_qwAvgConsumeTime;
    unsigned long long                  m_qwTotalConsumeTime;
    unsigned long long                  m_qwMsgCount;
    unsigned long long                  m_qwTotalMsgSize;
};

class CXMSGS{
public:
    typedef vector<CXMSG>               VecMsg;
    typedef vector<CXMSG>::iterator     VecMsgIt;
    typedef map<unsigned long long, CXMSG*> MapMsgMsgID;
    typedef map<unsigned long long, CXMSG*>::iterator MapMsgMsgIDIt;

public:
    CXMSGS()
    {
    }

public:
    VecMsg                              &GetMsg(){ return m_vecMsg;}                                      /// Msg

public:
    bool Init(IErrorDataEx& oError)
    {
        m_mapMsgMsgID.clear();
        for (VecMsgIt It = m_vecMsg.begin(); It != m_vecMsg.end(); ++It)
        {
            if (m_mapMsgMsgID.end() != m_mapMsgMsgID.find((*It).GetMsgID()))
            {
                oError.LastErrorDataEx() << "Msg->MsgID [" << (*It).GetMsgID() << "] repeat.\n";
                return false;
            }

            if (!(*It).Init(oError))
            {
                return false;
            }

            m_mapMsgMsgID[(*It).GetMsgID()] = &(*It);
        }
        return true;
    }

public:
    CXMSG* FindMsg(unsigned long long qwMsgID)
    {
        MapMsgMsgIDIt It = m_mapMsgMsgID.find(qwMsgID);
        if (It == m_mapMsgMsgID.end())
        {
            return NULL;
        }
        return It->second;
    }

private:
    VecMsg                              m_vecMsg;
    MapMsgMsgID                         m_mapMsgMsgID;
};

/*Define Structs and Unions        End*/


/*Define class      Begin*/

class CMsgPerformanceConfig;

typedef int (CMsgPerformanceConfig::*FuncCMsgPerformanceConfig)(void* pHost, const string& strDataName, xml_node& oXml);

class CMsgPerformanceConfig : public IErrorDataEx
{
public:
    typedef map<string, CXMSGS*> MapMsgs;
    typedef map<string, CXMSGS*>::iterator MapMsgsIt;

    typedef map<string, FuncCMsgPerformanceConfig> MapFuncCMsgPerformanceConfig;
    typedef map<string, FuncCMsgPerformanceConfig>::iterator MapFuncCMsgPerformanceConfigIt;
    CMsgPerformanceConfig();
    virtual ~CMsgPerformanceConfig();

    bool Init();
    bool LoadXML(const string& strPath = "");
    bool SaveXML(const string& strPath = "");
    bool SetXMLDoc(const string& strDoc);
    ostream& GetXMLDoc(ostream& os);

    bool LoadCSV(const string& strPath = "");
    bool SaveCSV(const string& strPath = "");
    bool LoadCSV_Msgs(const string& strPath = "");
    bool SaveCSV_Msgs(const string& strPath = "");
    ostream& GetCSVDoc_Msgs(ostream& os);

    template<typename T>
    void ReadCSV_XMSG (CXMSG& oXMSG, T& row);
    void WriteCSV_XMSG(ostream& os, CXMSG& oXMSG);

    virtual void OnError(const string& strError){}

    CXMSGS& GetMsgs()
    {
        return m_oMsgs;
    }

    int ReadData(void* pHost, const string& strDataName, xml_node& oXml);

    int GetCXMSG(void* pHost, const string& strDataName, xml_node& oXml);
    int GetCXMSGS(void* pHost, const string& strDataName, xml_node& oXml);

    void FormatCXMSG(CXMSG* pData, xml_node& oXml);
    void FormatCXMSGS(CXMSGS* pData, xml_node& oXml);

protected:
    CXMSGS m_oMsgs;

    MapFuncCMsgPerformanceConfig m_mapFuncCMsgPerformanceConfig;
};

/*Define class      End*/

NSMSGPERFORMANCE_END
#endif
